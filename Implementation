//Implementation file for heap

#include "Heap.h"


Heap::Heap(int numOfElements)
{
	size = 0;

	if(numOfElements>0)
	{
		capacity = numOfElements;
	}
	else if(numOfElements<=0)
	{
		cout << "Error" << endl;
	}

	myArray = new heapElement[capacity];
	
	if(myArray != 0)
	{
		for(int i=0;i<capacity;i++)
			myArray[i] = -1;
	}
	else
	{	
		cout << "Inaddequate memory to allocate heap \n -- terminating execution \n";
		exit(0);
	}
}

bool Heap::isEmpty()
{
	return (size==0);
}

void Heap::Insert(const heapElement& value)
{
	myArray[capacity-1] = value;
	size++;
	percolate_up();

}
heapElement Heap::findMax()
{
	return (myArray[0]);
}

void Heap::deleteMax()
{
	myArray[0] = myArray[size];
	size--;
	percolate_down();
}

void Heap::percolate_down()
{
	int r=0;

	for(int c=2*r+1; c<size; c++)
	{
		if(c<size && myArray[c]<myArray[c+1])
		{
			c++;
		}
		if(myArray[r]<myArray[c])
		{
			int temp = myArray[r];
			myArray[r] = myArray[c];
			myArray[c] = temp;
			r=c;
			c=2*c;
		}
		else
		{
			break;
		}
	}
}

void Heap::percolate_up()
{
	int r = 0;
	int c=capacity-1;

	while(c>=0)
	{
		if(c<capacity && myArray[c]>myArray[(c-1)/2])
		{
			r = c;
			c=(c-1)/2;
			int temp = myArray[r];
			myArray[r] = myArray[c];
			myArray[c] = temp;
		}
		else
		{
			break;
		}
	}
}
